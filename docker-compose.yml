services:
  cowrie:
    image: cowrie/cowrie:latest  # Use the official image directly
    container_name: sentinel-honeypot
    ports:
      - '2222:2222'
      - '2323:2323'
    volumes:
      - cowrie_var:/cowrie/var
      - ./infra/honeypot/cowrie.cfg:/cowrie/etc/cowrie.cfg:ro
    restart: unless-stopped
    networks:
      - sentinel-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: sentinel-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - '127.0.0.1:9200:9200'
    networks:
      - sentinel-net
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: sentinel-kibana
    ports:
      - '127.0.0.1:5601:5601'
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    networks:
      - sentinel-net
    restart: unless-stopped

  filebeat:
    build: ./infra/filebeat
    container_name: sentinel-filebeat
    user: root
    depends_on:
      - elasticsearch
    volumes:
      - cowrie_var:/log-data:ro
    env_file:
      - .env
    networks:
      - sentinel-net
    restart: unless-stopped

  bootstrap:
    image: curlimages/curl:8.10.1
    container_name: sentinel-bootstrap
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    command: >
      sh -c "
      until curl -s ${ELASTICSEARCH_URL} >/dev/null; do echo 'Waiting for Elasticsearch...'; sleep 5; done &&
      echo 'Creating geoip ingest pipeline...' &&
      curl -s -X PUT ${ELASTICSEARCH_URL}/_ingest/pipeline/geoip \
        -H 'Content-Type: application/json' \
        -d '{"processors":[{"geoip":{"field":"src_ip","target_field":"geoip","ignore_missing":true}}]}' &&
      echo 'Creating sentinel-events index template...' &&
      curl -s -X PUT ${ELASTICSEARCH_URL}/_index_template/sentinel-events-template \
        -H 'Content-Type: application/json' \
        -d '{
              "index_patterns": ["sentinel-events"],
              "template": {
                "mappings": {
                  "properties": {
                    "timestamp": {"type": "date"},
                    "risk_score": {"type": "integer"},
                    "geoip": {"properties": {"location": {"type": "geo_point"}}}
                  }
                }
              }
            }' &&
      echo 'Bootstrap completed.'
      "
    networks:
      - sentinel-net
    restart: on-failure

  sentinel_app:
    build: .
    container_name: sentinel-app
    ports:
      - '127.0.0.1:8000:8000'
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app/src
    depends_on:
      - elasticsearch
      - bootstrap
    command: uvicorn sentinel.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - sentinel-net
    restart: unless-stopped

volumes:
  cowrie_var:
  elastic_data:

networks:
  sentinel-net:
